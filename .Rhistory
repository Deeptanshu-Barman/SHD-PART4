mu.null<-166.3
sample.mean<-172.55
z.stat_1<-(sample.mean-mu.null)/(pop.stddeviation/sqrt(n))
### Since the alternative is in the right tail so z_stat upper tail value will be used
z_criticalval_1<-(qnorm(0.05,mean=0,sd=1,lower.tail = FALSE)) ## lower.tail is same as left tail
rm(list=ls())
rm(list=ls())
# H0: mu<=15cm versus H1: mu>15
rm(list=ls())
n<-10
pop.stddeviation<-0.5
mu.null<-15
sample.mean<-17
z.stat_1<-(sample.mean-mu.null)/(pop.stddeviation/sqrt(n))
z_criticalval_1<-(qnorm(0.05,mean=0,sd=1,lower.tail = FALSE)) ## lower.tail is same as left tail
### Here z_stat does not lie in the rejection region thus we fail to reject H0 ###
print(z.stat_1)
p.val_1<-pnorm(z.stat_1,mean=0,sd=1,lower.tail = FALSE)
### Here p value>0.05 thus we fail to reject H0 ###
print(p.val_1)
rm(list=ls())
n<-75
mu.null<-15
sample.mean<-17.4
sample.stddeviation<-6.3
t.stat<-(sample.mean-mu.null)/(sample.stddeviation/sqrt(n))
t_criticalval<-(qt(p=0.025,df=74,lower.tail = TRUE))
t_criticalval<-(qt(p=0.025,df=74,lower.tail = FALSE))
t_criticalval_1<-(qt(p=0.025,df=74,lower.tail = FALSE))
# H0: mu=15 years versus H1: mu!= 15years
rm(list=ls())
n<-75
mu.null<-15
sample.mean<-17.4
sample.stddeviation<-6.3
t.stat<-(sample.mean-mu.null)/(sample.stddeviation/sqrt(n))
t_criticalval_1<-(qt(p=0.025,df=74,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=74,lower.tail = TRUE))
p.val <-2*pt(q=t.stat,df=74,lower.tail = TRUE)
print(p.val)
# H0: mu=12 q/h versus H1: mu!=12
rm(list=ls())
n<-10
mu.null<-12
data<-c(14.3, 12.6, 13.7, 10.9, 13.7, 12.0, 11.4, 12.0, 12.6, 13.1)
t.ans<-t.test(x=data,mu=mu.null)
t.stat<-t.ans$statistic
View(t.ans)
# H0: mu=12 q/h versus H1: mu!=12
rm(list=ls())
n<-10
mu.null<-12
data<-c(14.3, 12.6, 13.7, 10.9, 13.7, 12.0, 11.4, 12.0, 12.6, 13.1)
t.ans<-t.test(x=data,mu=mu.null)
t.stat<-t.ans$statistic
t_criticalval_1<-(qt(p=0.025,df=9,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=9,lower.tail = TRUE))
p.val <-2*pt(q=t.stat,df=74,lower.tail = TRUE)
print(p.val)
p.val <-2*pt(q=t.stat,df=9,lower.tail = TRUE)
print(p.val)
p.val <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
p.val <-2*pt(q=t.stat,df=9,lower.tail = TRUE)
print(p.val)
p.val <-2*pt(q=t.stat,df=9,lower.tail = TRUE)
print(p.val)
# H0: mu=12 q/h versus H1: mu!=12
rm(list=ls())
n<-10
mu.null<-12
data<-c(14.3, 12.6, 13.7, 10.9, 13.7, 12.0, 11.4, 12.0, 12.6, 13.1)
t.ans<-t.test(x=data,mu=mu.null)
t.stat<-t.ans$statistic
t_criticalval_1<-(qt(p=0.025,df=9,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=9,lower.tail = TRUE))
p.val <-2*pt(q=t.stat,df=9,lower.tail = TRUE)
print(p.val)
p.val <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
p.val <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val)
p.val <-2*pt(q=t.stat,df=9,lower.tail = TRUE)
print(p.val)
p.val <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val)
rm(list=ls())
n<-37
sigma.null<-0.0230
sample.stddeviation<-0.01648
chi.stat_3<-((n-1)*(sample.stddeviation)^2)/(sigma.null^2)
### Since the alternative is less than so left side value will be used
chi_criticalval_3<-qchisq(p=0.05,df=36,lower.tail=TRUE)
# H0: mu=12 q/h versus H1: mu!=12
rm(list=ls())
n<-10
mu.null<-12
data<-c(14.3, 12.6, 13.7, 10.9, 13.7, 12.0, 11.4, 12.0, 12.6, 13.1)
t.ans<-t.test(x=data,mu=mu.null)
t.stat<-t.ans$statistic
t_criticalval_1<-(qt(p=0.025,df=9,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=9,lower.tail = TRUE))
p.val <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val)
# H0: mu=15 years versus H1: mu!= 15years
rm(list=ls())
n<-75
mu.null<-15
sample.mean<-17.4
sample.stddeviation<-6.3
t.stat<-(sample.mean-mu.null)/(sample.stddeviation/sqrt(n))
t_criticalval_1<-(qt(p=0.025,df=74,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=74,lower.tail = TRUE))
p.val <-2*pt(q=t.stat,df=74,lower.tail = TRUE)
# H0: mu=15 years versus H1: mu!= 15years
rm(list=ls())
n<-75
mu.null<-15
sample.mean<-17.4
sample.stddeviation<-6.3
t.stat<-(sample.mean-mu.null)/(sample.stddeviation/sqrt(n))
t_criticalval_1<-(qt(p=0.025,df=74,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=74,lower.tail = TRUE))
p.val1 <-2*pt(q=t.stat,df=74,lower.tail = TRUE)
p.val2 <-2*pt(q=t.stat,df=74,lower.tail = FALSE)
# H0: mu=15 years versus H1: mu!= 15years
rm(list=ls())
n<-75
mu.null<-15
sample.mean<-17.4
sample.stddeviation<-6.3
t.stat<-(sample.mean-mu.null)/(sample.stddeviation/sqrt(n))
t_criticalval_1<-(qt(p=0.025,df=74,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=74,lower.tail = TRUE))
p.val1 <-2*pt(q=t.stat,df=74,lower.tail = TRUE)
p.val1 <-2*pt(q=t.stat,df=74,lower.tail = TRUE)
p.val2 <-2*pt(q=t.stat,df=74,lower.tail = FALSE)
# H0: mu=15 years versus H1: mu!= 15years
rm(list=ls())
n<-75
mu.null<-15
sample.mean<-17.4
sample.stddeviation<-6.3
t.stat<-(sample.mean-mu.null)/(sample.stddeviation/sqrt(n))
t_criticalval_1<-(qt(p=0.025,df=74,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=74,lower.tail = TRUE))
p.val1 <-2*pt(q=t.stat,df=74,lower.tail = TRUE)
p.val2 <-2*pt(q=t.stat,df=74,lower.tail = FALSE)
p.val1 <-2*pt(q=t.stat,df=74,lower.tail = TRUE)
p.val2 <-2*pt(q=t.stat,df=74,lower.tail = FALSE)
# H0: mu=15 years versus H1: mu!= 15years
rm(list=ls())
n<-75
mu.null<-15
sample.mean<-17.4
sample.stddeviation<-6.3
t.stat<-(sample.mean-mu.null)/(sample.stddeviation/sqrt(n))
t_criticalval_1<-(qt(p=0.025,df=74,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=74,lower.tail = TRUE))
p.val1 <-2*pt(q=-t.stat,df=74,lower.tail = TRUE)
p.val2 <-2*pt(q=t.stat,df=74,lower.tail = FALSE)
print(p.val1)
# H0: mu=15 years versus H1: mu!= 15years
rm(list=ls())
n<-75
mu.null<-15
sample.mean<-17.4
sample.stddeviation<-6.3
t.stat<-(sample.mean-mu.null)/(sample.stddeviation/sqrt(n))
t_criticalval_1<-(qt(p=0.025,df=74,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=74,lower.tail = TRUE))
### Here t_stat does not lie in the rejection region thus we fail to reject H0 ###
# We see that it lasts in the right region with a p-value of 0.001 which is less 0.025
# p.val1 <-2*pt(q=-t.stat,df=74,lower.tail = TRUE)
p.val2 <-2*pt(q=t.stat,df=74,lower.tail = FALSE)
print(p.val2)
# H0: mu=12 q/h versus H1: mu!=12
rm(list=ls())
n<-10
mu.null<-12
data<-c(14.3, 12.6, 13.7, 10.9, 13.7, 12.0, 11.4, 12.0, 12.6, 13.1)
t.ans<-t.test(x=data,mu=mu.null)
t.stat<-t.ans$statistic
t_criticalval_1<-(qt(p=0.025,df=9,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=9,lower.tail = TRUE))
p.val <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val)
# H0: mu=12 q/h versus H1: mu!=12
rm(list=ls())
n<-10
mu.null<-12
data<-c(14.3, 12.6, 13.7, 10.9, 13.7, 12.0, 11.4, 12.0, 12.6, 13.1)
t.ans<-t.test(x=data,mu=mu.null)
t.stat<-t.ans$statistic
t_criticalval_1<-(qt(p=0.025,df=9,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=9,lower.tail = TRUE))
p.val1 <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
p.val2 <-2*pt(q=t.stat,df=9,lower.tail = TRUE)
print(p.val)
print(p.val1)
# H0: mu=12 q/h versus H1: mu!=12
rm(list=ls())
n<-10
mu.null<-12
data<-c(14.3, 12.6, 13.7, 10.9, 13.7, 12.0, 11.4, 12.0, 12.6, 13.1)
t.ans<-t.test(x=data,mu=mu.null)
t.stat<-t.ans$statistic
t_criticalval_1<-(qt(p=0.025,df=9,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=9,lower.tail = TRUE))
p.val1 <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val1)
# AS p Value greater Then 0.5 This lies in the acceptance region.
# AS p Value greater Then 0.5 This lies in the acceptance region.
# It can also be seen from t_critical as it lies in range(+2.26 and -2.26)
rm(list=ls())
n1<-9; n2<-16
mu.null<-0 ### H0: mu_1-mu_2=0
sample1.mean<-2; sample2.mean<-3.2
sample1.stddeviation<-sqrt(0.75); sample2.stddeviation<-1
t.stat<-((sample1.mean-sample2.mean)-mu.null)/sqrt(((sample1.stddeviation^2)/n1)+((sample2.stddeviation^2)/n2))
### Since the alternative is both sided so we can use either of the tail. The CV will lie on both sides of the curve.
t_criticalval_1<-(qt(p=0.025,df=8,lower.tail = TRUE))
t_criticalval_2<-(qt(p=0.025,df=8,lower.tail = FALSE))
p.val<-2*pt(q=t.stat,df=8,lower.tail = TRUE)
p.val1<-2*pt(q=t.stat,df=8,lower.tail = TRUE)
p.val2<-2*pt(q=t.stat,df=8,lower.tail = FALSE)
data1<-c(49, 53, 51, 52, 47, 50, 52, 53)
data2<-c(52, 55, 52, 53, 50, 54, 54, 53)
#### Question  5 #####
#### H0: mu=0 versus H1: mu != zero
rm(list=ls())
data1<-c(49, 53, 51, 52, 47, 50, 52, 53)
data2<-c(52, 55, 52, 53, 50, 54, 54, 53)
data3<-data2-data1
test.ans<-t.test(x=data3,mu=0,alternative="two.sided")
t.stat<-test.ans$statistic
#### Question  5 #####
#### H0: mu=0 versus H1: mu != zero
rm(list=ls())
data1<-c(49, 53, 51, 52, 47, 50, 52, 53)
data2<-c(52, 55, 52, 53, 50, 54, 54, 53)
data3<-data2-data1
test.ans<-t.test(x=data3,mu=0,alternative="two.sided")
t.stat<-test.ans$statistic
t_criticalval_1<-(qt(0.05,df=7,lower.tail = FALSE))
t_criticalval_2<-(qt(0.05,df=7,lower.tail = TRUE))
print(p.val1)
p.val1 <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val1)
#### Question  5 #####
#### H0: mu=0 versus H1: mu != zero
rm(list=ls())
data1<-c(49, 53, 51, 52, 47, 50, 52, 53)
data2<-c(52, 55, 52, 53, 50, 54, 54, 53)
data3<-data2-data1
test.ans<-t.test(x=data3,mu=0,alternative="two.sided")
t.stat<-test.ans$statistic
t_criticalval_1<-(qt(0.05,df=7,lower.tail = FALSE))
t_criticalval_2<-(qt(0.05,df=7,lower.tail = TRUE))
p.val1 <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val1)
# H0: mu<=15cm versus H1: mu>15
rm(list=ls())
n<-10
pop.stddeviation<-0.5
mu.null<-15
sample.mean<-17
z.stat_1<-(sample.mean-mu.null)/(pop.stddeviation/sqrt(n))
z_criticalval_1<-(qnorm(0.05,mean=0,sd=1,lower.tail = FALSE)) ## lower.tail is same as left tail
### Here z_stat does not lie in the rejection region thus we fail to reject H0 ###
print(z.stat_1)
p.val_1<-pnorm(z.stat_1,mean=0,sd=1,lower.tail = FALSE)
### Here p value>0.05 thus we fail to reject H0 ###
print(p.val_1)
# H0: mu=15 years versus H1: mu!= 15years
rm(list=ls())
n<-75
mu.null<-15
sample.mean<-17.4
sample.stddeviation<-6.3
t.stat<-(sample.mean-mu.null)/(sample.stddeviation/sqrt(n))
t_criticalval_1<-(qt(p=0.025,df=74,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=74,lower.tail = TRUE))
### Here t_stat does not lie in the rejection region thus we fail to reject H0 ###
# We see that it lasts in the right region with a p-value of 0.001 which is less 0.025
# p.val1 <-2*pt(q=-t.stat,df=74,lower.tail = TRUE)
p.val2 <-2*pt(q=t.stat,df=74,lower.tail = FALSE)
print(p.val2)
# H0: mu=12 q/h versus H1: mu!=12
rm(list=ls())
n<-10
mu.null<-12
data<-c(14.3, 12.6, 13.7, 10.9, 13.7, 12.0, 11.4, 12.0, 12.6, 13.1)
t.ans<-t.test(x=data,mu=mu.null)
t.stat<-t.ans$statistic
t_criticalval_1<-(qt(p=0.025,df=9,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=9,lower.tail = TRUE))
p.val1 <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val1)
rm(list=ls())
n1<-9; n2<-16
mu.null<-0 ### H0: mu_1-mu_2=0
sample1.mean<-2; sample2.mean<-3.2
sample1.stddeviation<-sqrt(0.75); sample2.stddeviation<-1
t.stat<-((sample1.mean-sample2.mean)-mu.null)/sqrt(((sample1.stddeviation^2)/n1)+((sample2.stddeviation^2)/n2))
### Since the alternative is both sided so we can use either of the tail. The CV will lie on both sides of the curve.
t_criticalval_1<-(qt(p=0.025,df=8,lower.tail = TRUE))
t_criticalval_2<-(qt(p=0.025,df=8,lower.tail = FALSE))
p.val<-2*pt(q=t.stat,df=8,lower.tail = TRUE)
#### Question  5 #####
#### H0: mu=0 versus H1: mu != zero
rm(list=ls())
data1<-c(49, 53, 51, 52, 47, 50, 52, 53)
data2<-c(52, 55, 52, 53, 50, 54, 54, 53)
data3<-data2-data1
test.ans<-t.test(x=data3,mu=0,alternative="two.sided")
t.stat<-test.ans$statistic
t_criticalval_1<-(qt(0.05,df=7,lower.tail = FALSE))
t_criticalval_2<-(qt(0.05,df=7,lower.tail = TRUE))
p.val1 <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val1)
#### Question  5 #####
#### H0: mu=0 versus H1: mu != zero
rm(list=ls())
data1<-c(49, 53, 51, 52, 47, 50, 52, 53)
data2<-c(52, 55, 52, 53, 50, 54, 54, 53)
data3<-data2-data1
test.ans<-t.test(x=data3,mu=0,alternative="two.sided")
t.stat<-test.ans$statistic
t_criticalval_1<-(qt(0.25,df=7,lower.tail = FALSE))
t_criticalval_2<-(qt(0.25,df=7,lower.tail = TRUE))
p.val1 <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val1)
#### Question  5 #####
#### H0: mu=0 versus H1: mu != zero
rm(list=ls())
data1<-c(49, 53, 51, 52, 47, 50, 52, 53)
data2<-c(52, 55, 52, 53, 50, 54, 54, 53)
data3<-data2-data1
test.ans<-t.test(x=data3,mu=0,alternative="two.sided")
t.stat<-test.ans$statistic
t_criticalval_1<-(qt(0.025,df=7,lower.tail = FALSE))
t_criticalval_2<-(qt(0.025,df=7,lower.tail = TRUE))
p.val1 <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val1)
# H0: mu<=15cm versus H1: mu>15
rm(list=ls())
n<-10
pop.stddeviation<-0.5
mu.null<-15
sample.mean<-17
z.stat_1<-(sample.mean-mu.null)/(pop.stddeviation/sqrt(n))
z_criticalval_1<-(qnorm(0.05,mean=0,sd=1,lower.tail = FALSE)) ## lower.tail is same as left tail
### Here z_stat does not lie in the rejection region thus we fail to reject H0 ###
print(z.stat_1)
p.val_1<-pnorm(z.stat_1,mean=0,sd=1,lower.tail = FALSE)
### Here p value>0.05 thus we fail to reject H0 ###
print(p.val_1)
# H0: mu=15 years versus H1: mu!= 15years
rm(list=ls())
n<-75
mu.null<-15
sample.mean<-17.4
sample.stddeviation<-6.3
t.stat<-(sample.mean-mu.null)/(sample.stddeviation/sqrt(n))
t_criticalval_1<-(qt(p=0.025,df=74,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=74,lower.tail = TRUE))
### Here t_stat does not lie in the rejection region thus we fail to reject H0 ###
# We see that it lasts in the right region with a p-value of 0.001 which is less 0.025
# p.val1 <-2*pt(q=-t.stat,df=74,lower.tail = TRUE)
p.val2 <-2*pt(q=t.stat,df=74,lower.tail = FALSE)
print(p.val2)
# H0: mu=12 q/h versus H1: mu!=12
rm(list=ls())
n<-10
mu.null<-12
data<-c(14.3, 12.6, 13.7, 10.9, 13.7, 12.0, 11.4, 12.0, 12.6, 13.1)
t.ans<-t.test(x=data,mu=mu.null)
t.stat<-t.ans$statistic
t.stat<-t.ans$statistic
t_criticalval_1<-(qt(p=0.025,df=9,lower.tail = FALSE))
t_criticalval_2<-(qt(p=0.025,df=9,lower.tail = TRUE))
p.val1 <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val1)
n1<-9; n2<-16
mu.null<-0 ### H0: mu_1-mu_2=0
rm(list=ls())
n1<-9; n2<-16
mu.null<-0 ### H0: mu_1-mu_2=0
sample1.mean<-2; sample2.mean<-3.2
sample1.stddeviation<-sqrt(0.75); sample2.stddeviation<-1
t.stat<-((sample1.mean-sample2.mean)-mu.null)/sqrt(((sample1.stddeviation^2)/n1)+((sample2.stddeviation^2)/n2))
### Since the alternative is both sided so we can use either of the tail. The CV will lie on both sides of the curve.
t_criticalval_1<-(qt(p=0.025,df=8,lower.tail = TRUE))
t_criticalval_2<-(qt(p=0.025,df=8,lower.tail = FALSE))
p.val<-2*pt(q=t.stat,df=8,lower.tail = TRUE)
rm(list=ls())
n1<-9; n2<-16
mu.null<-0 ### H0: mu_1-mu_2=0
sample1.mean<-2; sample2.mean<-3.2
sample1.stddeviation<-sqrt(0.75); sample2.stddeviation<-1
t.stat<-((sample1.mean-sample2.mean)-mu.null)/sqrt(((sample1.stddeviation^2)/n1)+((sample2.stddeviation^2)/n2))
print(t.stat)
### Since the alternative is both sided so we can use either of the tail. The CV will lie on both sides of the curve.
t_criticalval_1<-(qt(p=0.025,df=8,lower.tail = TRUE))
print(t_criticalval_1)
t_criticalval_2<-(qt(p=0.025,df=8,lower.tail = FALSE))
print(t_criticalval_2)
p.val<-2*pt(q=t.stat,df=8,lower.tail = TRUE)
###p value <0.05 i.e 0.013. We reject the H0. i.e the average playing time is not the same
##It can be seen as t.stat =-3.14 lies in the rejection region(-inf,-2.3) U (2.3,inf)
print(p.val)
### H0: mu_1-mu_2=0
rm(list=ls())
n1<-9; n2<-16
mu.null<-0
sample1.mean<-2; sample2.mean<-3.2
sample1.stddeviation<-sqrt(0.75); sample2.stddeviation<-1
t.stat<-((sample1.mean-sample2.mean)-mu.null)/sqrt(((sample1.stddeviation^2)/n1)+((sample2.stddeviation^2)/n2))
print(t.stat)
### Since the alternative is both sided so we can use either of the tail. The CV will lie on both sides of the curve.
t_criticalval_1<-(qt(p=0.025,df=8,lower.tail = TRUE))
print(t_criticalval_1)
t_criticalval_2<-(qt(p=0.025,df=8,lower.tail = FALSE))
print(t_criticalval_2)
p.val<-2*pt(q=t.stat,df=8,lower.tail = TRUE)
###p value <0.05 i.e 0.013. We reject the H0. i.e the average playing time is not the same
##It can be seen as t.stat =-3.14 lies in the rejection region(-inf,-2.3) U (2.3,inf)
print(p.val)
#### Question  5 #####
#### H0: mu=0 versus H1: mu != zero
rm(list=ls())
#### Question  5 #####
#### H0: mu=0 versus H1: mu != zero
rm(list=ls())
data1<-c(49, 53, 51, 52, 47, 50, 52, 53)
data2<-c(52, 55, 52, 53, 50, 54, 54, 53)
data3<-data2-data1
test.ans<-t.test(x=data3,mu=0,alternative="two.sided")
t.stat<-test.ans$statistic
t_criticalval_1<-(qt(0.025,df=7,lower.tail = FALSE))
t_criticalval_2<-(qt(0.025,df=7,lower.tail = TRUE))
p.val1 <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val1)
#### Question  5 #####
#### H0: mu=0 versus H1: mu != zero
rm(list=ls())
data1<-c(49, 53, 51, 52, 47, 50, 52, 53)
data2<-c(52, 55, 52, 53, 50, 54, 54, 53)
data3<-data2-data1
test.ans<-t.test(x=data3,mu=0,alternative="two.sided")
t.stat<-test.ans$statistic
print(t.stat)
t_criticalval_1<-(qt(0.025,df=7,lower.tail = FALSE))
print(t_criticalval_1)
t_criticalval_2<-(qt(0.025,df=7,lower.tail = TRUE))
print(t_criticalval_2)
p.val1 <-2*pt(q=t.stat,df=9,lower.tail = FALSE)
print(p.val1)
install.packages("missForest")
install.packages("bnlearn")
library(missForest)
library(bnlearn)
??
exit
library(missForest)
file1 <-"files_for+comparison\Folder_1@871405@871405_v2@result_merge.csv@"
imputed_data2 <- missForest(data2)
file1 <-"files_for+comparison/Folder_1@871405@871405_v2@result_merge.csv@"
file2 <-"files_for+comparison/Folder_1@942499@942499_v1@genetic_code.csv@"
data1 <- read.csv(file1)
getwd()
setwd("..")
setwd("Desktop/SHD+PART4/")
file1 <-"files_for+comparison/Folder_1@871405@871405_v2@result_merge.csv@"
file2 <-"files_for+comparison/Folder_1@942499@942499_v1@genetic_code.csv@"
data1 <- read.csv(file1)
imputed_data1 <- missForest(data1)
View(data1)
file1 <-"files_for+comparison/Folder_1@871405@871405_v2@result_merge.csv@"
file2 <-"files_for+comparison/Folder_1@942499@942499_v1@genetic_code.csv@"
data1 <- read.csv(file1)
# Identify non-numeric columns (character or factor)
non_numeric_cols <- sapply(data1, function(x) !is.numeric(x))
# Convert non-numeric columns to factors
data1[, non_numeric_cols] <- lapply(data1[, non_numeric_cols], as.factor)
imputed_data1 <- missForest(data1)
data2 <- read.csv(file2)
# Identify non-numeric columns (character or factor)
non_numeric_cols <- sapply(data2, function(x) !is.numeric(x))
# Convert non-numeric columns to factors
data2[, non_numeric_cols] <- lapply(data2[, non_numeric_cols], as.factor)
imputed_data2 <- missForest(data2)
library(arules)
install.packages("arules")
library(arules)
# Choose the number of clusters for discretization
num_clusters <- 5  # You can adjust this number
# Perform clustering-based discretization
discretized_data1 <- discretize(imputed_data1, method = "cluster", breaks = num_clusters)
View(imputed_data1)
# Choose the number of clusters for discretization
num_clusters <- 5  # You can adjust this number
# Perform clustering-based discretization
numeric_columns <- sapply(imputed_data1, is.numeric)
discretized_data1 <- discretize(imputed_data1[, numeric_columns], method = "cluster", breaks = num_clusters)
# Choose the number of clusters for discretization
num_clusters <- 5  # You can adjust this number
numeric_columns1 <- sapply(imputed_data1$ximp, is.numeric)
discretized_data1 <- discretize(imputed_data1$ximp[, numeric_columns1], method = "cluster", breaks = num_clusters)
num_clusters <- 5  # You can adjust this number
# Perform clustering-based discretization for imputed_data1
discretized_data1 <- discretize(imputed_data1$ximp, method = "cluster", breaks = num_clusters)
discretized_data1 <- discretize(imputed_data1$ximp, method = "cluster", breaks = num_clusters)
